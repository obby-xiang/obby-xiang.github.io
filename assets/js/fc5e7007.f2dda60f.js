"use strict";(self.webpackChunkobby_xiang_github_io=self.webpackChunkobby_xiang_github_io||[]).push([[7566],{121:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var i=t(4848),a=t(8453);const r={slug:"glide-abnormal-image-size",title:"Glide \u52a0\u8f7d\u56fe\u7247\u5c3a\u5bf8\u5f02\u5e38\u95ee\u9898",authors:"obby-xiang",tags:["Glide"]},o=void 0,s={permalink:"/glide-abnormal-image-size",editUrl:"https://github.com/obby-xiang/obby-xiang.github.io/edit/master/blog/2024-04-19-Glide \u52a0\u8f7d\u56fe\u7247\u5c3a\u5bf8\u5f02\u5e38\u95ee\u9898/index.md",source:"@site/blog/2024-04-19-Glide \u52a0\u8f7d\u56fe\u7247\u5c3a\u5bf8\u5f02\u5e38\u95ee\u9898/index.md",title:"Glide \u52a0\u8f7d\u56fe\u7247\u5c3a\u5bf8\u5f02\u5e38\u95ee\u9898",description:"Glide \u662f\u4e00\u4e2a\u5feb\u901f\u9ad8\u6548\u7684 Android \u56fe\u7247\u52a0\u8f7d\u5e93\u3002\u6700\u8fd1\u5728\u4f7f\u7528\u8fd9\u4e2a\u5e93\u7684\u65f6\u5019\u9047\u5230\u4e00\u4e2a\u6709\u610f\u601d\u7684\u95ee\u9898\uff0c\u7b80\u5355\u56de\u987e\u4e00\u4e0b\u3002",date:"2024-04-19T00:00:00.000Z",tags:[{label:"Glide",permalink:"/tags/glide"}],readingTime:20.955,hasTruncateMarker:!0,authors:[{name:"obby-xiang",url:"https://github.com/obby-xiang",imageURL:"https://github.com/obby-xiang.png",key:"obby-xiang"}],frontMatter:{slug:"glide-abnormal-image-size",title:"Glide \u52a0\u8f7d\u56fe\u7247\u5c3a\u5bf8\u5f02\u5e38\u95ee\u9898",authors:"obby-xiang",tags:["Glide"]},unlisted:!1,nextItem:{title:"\u5728 Windows \u4e0a\u5b89\u88c5 Gerrit",permalink:"/install-gerrit-on-windows"}},l={authorsImageUrls:[void 0]},d=[{value:"\u95ee\u9898\u80cc\u666f",id:"\u95ee\u9898\u80cc\u666f",level:2},{value:"\u95ee\u9898\u5206\u6790",id:"\u95ee\u9898\u5206\u6790",level:2},{value:"\u95ee\u9898\u89e3\u51b3",id:"\u95ee\u9898\u89e3\u51b3",level:2},{value:"\u53c2\u8003",id:"\u53c2\u8003",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",li:"li",mermaid:"mermaid",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/bumptech/glide",children:"Glide"})," \u662f\u4e00\u4e2a\u5feb\u901f\u9ad8\u6548\u7684 Android \u56fe\u7247\u52a0\u8f7d\u5e93\u3002\u6700\u8fd1\u5728\u4f7f\u7528\u8fd9\u4e2a\u5e93\u7684\u65f6\u5019\u9047\u5230\u4e00\u4e2a\u6709\u610f\u601d\u7684\u95ee\u9898\uff0c\u7b80\u5355\u56de\u987e\u4e00\u4e0b\u3002"]}),"\n",(0,i.jsx)(n.h2,{id:"\u95ee\u9898\u80cc\u666f",children:"\u95ee\u9898\u80cc\u666f"}),"\n",(0,i.jsx)(n.p,{children:"\u6211\u8d1f\u8d23\u5f00\u53d1\u7684\u4e00\u4e2a Android \u5e94\u7528\uff0c\u6709\u4e2a\u56fe\u7247\u5168\u5c4f\u9884\u89c8\u7684\u529f\u80fd\uff0c\u6d4b\u8bd5\u540c\u5b66\u9a8c\u8bc1\u7684\u65f6\u5019\u53d1\u73b0\u6709\u4e9b\u56fe\u7247\u65e0\u6cd5\u52a0\u8f7d\uff0c\u95ee\u9898\u65e5\u5fd7\u5982\u4e0b\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"java.lang.RuntimeException: Canvas: trying to draw too large(138240000bytes) bitmap.\n    at android.graphics.RecordingCanvas.throwIfCannotDraw(RecordingCanvas.java:280)\n    at android.graphics.BaseRecordingCanvas.drawBitmap(BaseRecordingCanvas.java:88)\n    at android.graphics.drawable.BitmapDrawable.draw(BitmapDrawable.java:548)\n    at android.widget.ImageView.onDraw(ImageView.java:1436)\n    at android.view.View.draw(View.java:22350)\n    ...\n"})}),"\n",(0,i.jsx)(n.p,{children:"\u4ee3\u7801\u5927\u81f4\u5982\u4e0b\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="MainActivity.java"',children:"public class MainActivity extends AppCompatActivity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        EdgeToEdge.enable(this);\n        setContentView(R.layout.activity_main);\n        final ImageView imageView = findViewById(R.id.image);\n        Glide.with(imageView)\n            .asBitmap()\n            .load(R.drawable.image)\n            .transform(new FitCenter())\n            .into(imageView);\n    }\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:'title="activity_main.xml"',children:'<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:tools="http://schemas.android.com/tools"\n    android:layout_width="match_parent"\n    android:layout_height="match_parent"\n    tools:context=".MainActivity">\n\n    <ImageView\n        android:id="@+id/image"\n        android:layout_width="match_parent"\n        android:layout_height="match_parent"\n        android:scaleType="fitCenter"\n        tools:ignore="ContentDescription" />\n</androidx.constraintlayout.widget.ConstraintLayout>\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u6d4b\u8bd5\u8bbe\u5907\uff1aAndroid 11\uff0c1080x2400"}),"\n",(0,i.jsxs)(n.li,{children:["\u6d4b\u8bd5\u56fe\u7247\uff1a",(0,i.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(3326).A+"",children:"6000x1000"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"\u4f7f\u7528\u6d4b\u8bd5\u56fe\u7247\u5c1d\u8bd5\u590d\u73b0\u95ee\u9898\uff0c\u5374\u53d1\u73b0\u56fe\u7247\u662f\u53ef\u4ee5\u6b63\u5e38\u52a0\u8f7d\u7684\u3002\u9000\u51fa\u5e94\u7528\u7ec8\u6b62\u8fdb\u7a0b\u540e\u518d\u6b21\u542f\u52a8\u5e94\u7528\u67e5\u770b\u6d4b\u8bd5\u56fe\u7247\uff0c\u795e\u5947\u7684\u4e8b\u60c5\u53d1\u751f\u4e86\u2014\u2014\u56fe\u7247\u52a0\u8f7d\u4e0d\u51fa\u6765\u4e86\uff0c\u95ee\u9898\u65e5\u5fd7\u8ddf\u521a\u5f00\u59cb\u63d0\u5230\u7684\u4e00\u6a21\u4e00\u6837\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u5462\uff1f"}),"\n",(0,i.jsx)(n.h2,{id:"\u95ee\u9898\u5206\u6790",children:"\u95ee\u9898\u5206\u6790"}),"\n",(0,i.jsx)(n.p,{children:"\u5148\u770b\u4e0b\u629b\u51fa\u5f02\u5e38\u7684\u5730\u65b9\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="android.graphics.RecordingCanvas"',children:'public static final int MAX_BITMAP_SIZE = 100 * 1024 * 1024; // 100 MB\n\n@Override\nprotected void throwIfCannotDraw(Bitmap bitmap) {\n    super.throwIfCannotDraw(bitmap);\n    int bitmapSize = bitmap.getByteCount();\n    if (bitmapSize > MAX_BITMAP_SIZE) {\n        throw new RuntimeException(\n                "Canvas: trying to draw too large(" + bitmapSize + "bytes) bitmap.");\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"ImageView"})," \u7ed8\u5236\u7684\u4f4d\u56fe\u8d85\u8fc7\u4e86 100 MB \u7684\u5927\u5c0f\u9650\u5236\uff0c\u629b\u51fa\u4e86\u8fd0\u884c\u65f6\u5f02\u5e38\u3002\u6d4b\u8bd5\u56fe\u7247\u5927\u5c0f\u662f 6000x1000\uff0c\u5982\u679c\u4f7f\u7528 ",(0,i.jsx)(n.code,{children:"ARGB_8888"})," \u914d\u7f6e\u52a0\u8f7d\uff0c\u4f4d\u56fe\u5927\u5c0f\u4e0d\u5230 23 MB\uff086000x1000x4 \u5b57\u8282\uff09\u3002\u5728\u52a0\u8f7d\u56fe\u7247\u7684\u65f6\u5019\u8fd8\u4f7f\u7528\u4e86 ",(0,i.jsx)(n.a,{href:"https://github.com/bumptech/glide/blob/v4.16.0/library/src/main/java/com/bumptech/glide/load/resource/bitmap/FitCenter.java",children:(0,i.jsx)(n.code,{children:"FitCenter"})})," \u53d8\u6362\uff0c\u6700\u7ec8\u7ed8\u5236\u7684\u4f4d\u56fe\u5927\u5c0f\u5e94\u8be5\u662f 1080x180\uff0c\u4e0d\u5230 1 MB\uff081080x180x4 \u5b57\u8282\uff09\u3002"]}),"\n",(0,i.jsx)(n.p,{children:"\u4f7f\u7528\u56fe\u7247\u52a0\u8f7d\u8bf7\u6c42\u76d1\u542c\u5668\uff0c\u52a0\u8f7d\u5b8c\u6210\u65f6\u6253\u5370\u56fe\u7247\u4fe1\u606f\u65e5\u5fd7\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'Glide.with(imageView)\n    .asBitmap()\n    .load(R.drawable.image)\n    .transform(new FitCenter())\n    // highlight-start\n    .addListener(new RequestListener<Bitmap>() {\n        @Override\n        public boolean onLoadFailed(@Nullable GlideException e, @Nullable Object model,\n            @NonNull Target<Bitmap> target, boolean isFirstResource) {\n            Log.e("GlideExample", "failed to load image", e);\n            return false;\n        }\n\n        @Override\n        public boolean onResourceReady(@NonNull Bitmap resource, @NonNull Object model, Target<Bitmap> target,\n            @NonNull DataSource dataSource, boolean isFirstResource) {\n            Log.i("GlideExample", "successfully to load image, resource size: "\n                + resource.getWidth() + "x" + resource.getHeight()\n                + ", data source: "\n                + dataSource\n                + ", first resource: "\n                + isFirstResource);\n            return false;\n        }\n    })\n    // highlight-end\n    .into(imageView);\n'})}),"\n",(0,i.jsx)(n.p,{children:"\u9996\u6b21\u542f\u52a8\u5e94\u7528\u52a0\u8f7d\u56fe\u7247\u65e5\u5fd7\u6253\u5370\u5982\u4e0b\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-log",children:"GlideExample: successfully to load image, resource size: 1080x180, data source: LOCAL, first resource: true\n"})}),"\n",(0,i.jsx)(n.p,{children:"\u7ec8\u6b62\u8fdb\u7a0b\u540e\u518d\u6b21\u542f\u52a8\u5e94\u7528\u52a0\u8f7d\u56fe\u7247\u65e5\u5fd7\u6253\u5370\u5982\u4e0b\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-log",children:"GlideExample: successfully to load image, resource size: 14400x2400, data source: RESOURCE_DISK_CACHE, first resource: true\n"})}),"\n",(0,i.jsx)(n.p,{children:"\u53ef\u4ee5\u770b\u51fa\uff0c\u4ece\u539f\u59cb\u8d44\u6e90\u52a0\u8f7d\u7684\u4f4d\u56fe\u5927\u5c0f\u4e0e\u9884\u671f\u5927\u5c0f\u4e00\u81f4\uff0c\u800c\u4ece\u78c1\u76d8\u7f13\u5b58\u52a0\u8f7d\u7684\u4f4d\u56fe\u5927\u5c0f\u8fdc\u5927\u4e8e\u9884\u671f\u5927\u5c0f\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u4e3a\u4ec0\u4e48\u52a0\u8f7d\u51fa\u6765\u7684\u4f4d\u56fe\u5927\u5c0f\u4f1a\u6709\u5dee\u5f02\u5462\uff1f"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/bumptech/glide/blob/v4.16.0/library/src/main/java/com/bumptech/glide/load/resource/bitmap/FitCenter.java",children:(0,i.jsx)(n.code,{children:"FitCenter"})})," \u53d8\u6362\u8c03\u7528 ",(0,i.jsx)(n.a,{href:"https://github.com/bumptech/glide/blob/master/library/src/main/java/com/bumptech/glide/load/resource/bitmap/TransformationUtils.java#L154",children:(0,i.jsx)(n.code,{children:"TransformationUtils#fitCenter"})})," \u5904\u7406\u4f4d\u56fe\uff0c\u8be5\u65b9\u6cd5\u6709\u65e5\u5fd7\u6253\u5370\u53d8\u6362\u524d\u540e\u7684\u4f4d\u56fe\u5927\u5c0f\u4fe1\u606f\uff1a"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="com.bumptech.glide.load.resource.bitmap.TransformationUtils"',children:'/**\n * An expensive operation to resize the given Bitmap down so that it fits within the given\n * dimensions maintain the original proportions.\n *\n * @param pool The BitmapPool obtain a bitmap from.\n * @param inBitmap The Bitmap to shrink.\n * @param width The width in pixels the final image will fit within.\n * @param height The height in pixels the final image will fit within.\n * @return A new Bitmap shrunk to fit within the given dimensions, or toFit if toFit\'s width or\n *     height matches the given dimensions and toFit fits within the given dimensions\n */\npublic static Bitmap fitCenter(\n    @NonNull BitmapPool pool, @NonNull Bitmap inBitmap, int width, int height) {\n    if (inBitmap.getWidth() == width && inBitmap.getHeight() == height) {\n        if (Log.isLoggable(TAG, Log.VERBOSE)) {\n            Log.v(TAG, "requested target size matches input, returning input");\n        }\n        return inBitmap;\n    }\n    final float widthPercentage = width / (float) inBitmap.getWidth();\n    final float heightPercentage = height / (float) inBitmap.getHeight();\n    final float minPercentage = Math.min(widthPercentage, heightPercentage);\n\n    // Round here in case we\'ve decoded exactly the image we want, but take the floor below to\n    // avoid a line of garbage or blank pixels in images.\n    int targetWidth = Math.round(minPercentage * inBitmap.getWidth());\n    int targetHeight = Math.round(minPercentage * inBitmap.getHeight());\n\n    if (inBitmap.getWidth() == targetWidth && inBitmap.getHeight() == targetHeight) {\n        if (Log.isLoggable(TAG, Log.VERBOSE)) {\n            Log.v(TAG, "adjusted target size matches input, returning input");\n        }\n        return inBitmap;\n    }\n\n    // Take the floor of the target width/height, not round. If the matrix\n    // passed into drawBitmap rounds differently, we want to slightly\n    // overdraw, not underdraw, to avoid artifacts from bitmap reuse.\n    targetWidth = (int) (minPercentage * inBitmap.getWidth());\n    targetHeight = (int) (minPercentage * inBitmap.getHeight());\n\n    Bitmap.Config config = getNonNullConfig(inBitmap);\n    Bitmap toReuse = pool.get(targetWidth, targetHeight, config);\n\n    // We don\'t add or remove alpha, so keep the alpha setting of the Bitmap we were given.\n    TransformationUtils.setAlpha(inBitmap, toReuse);\n\n    // highlight-start\n    if (Log.isLoggable(TAG, Log.VERBOSE)) {\n        Log.v(TAG, "request: " + width + "x" + height);\n        Log.v(TAG, "toFit:   " + inBitmap.getWidth() + "x" + inBitmap.getHeight());\n        Log.v(TAG, "toReuse: " + toReuse.getWidth() + "x" + toReuse.getHeight());\n        Log.v(TAG, "minPct:   " + minPercentage);\n    }\n    // highlight-end\n\n    Matrix matrix = new Matrix();\n    matrix.setScale(minPercentage, minPercentage);\n    applyMatrix(inBitmap, toReuse, matrix);\n\n    return toReuse;\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\u8c03\u6574 ",(0,i.jsx)(n.code,{children:"TransformationUtils"})," \u65e5\u5fd7\u7ea7\u522b\uff1a"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"adb shell setprop log.tag.TransformationUtils VERBOSE\n"})}),"\n",(0,i.jsx)(n.p,{children:"\u4ece\u539f\u59cb\u8d44\u6e90\u52a0\u8f7d\u56fe\u7247\u65e5\u5fd7\u6253\u5370\u5982\u4e0b\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-log",children:"TransformationUtils: request: 1080x2400\nTransformationUtils: toFit:   14400x2400\nTransformationUtils: toReuse: 1080x180\nTransformationUtils: minPct:   0.075\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/bumptech/glide/blob/v4.16.0/library/src/main/java/com/bumptech/glide/load/resource/bitmap/FitCenter.java",children:(0,i.jsx)(n.code,{children:"FitCenter"})})," \u53d8\u6362\u524d\u4f4d\u56fe\u5927\u5c0f\u662f 14400x2400\uff0c\u53d8\u6362\u540e\u4f4d\u56fe\u5927\u5c0f\u662f 1080x180\uff0c\u4e5f\u5c31\u662f\u53d8\u6362\u524d\u4f4d\u56fe\u5927\u5c0f\u662f\u5f02\u5e38\u7684\uff0c\u53d8\u6362\u540e\u8c03\u6574\u6b63\u5e38\u4e86\u3002"]}),"\n",(0,i.jsx)(n.mermaid,{value:'---\ntitle: \u4ece\u539f\u59cb\u8d44\u6e90\u52a0\u8f7d\u56fe\u7247\n---\nflowchart LR\n    original["\u539f\u59cb\u8d44\u6e90 6000x1000"] -- \u89e3\u7801 --\x3e decoded["\u4f4d\u56fe 14400x2400"] -- \u53d8\u6362 --\x3e transformed["\u4f4d\u56fe 1080x180"]'}),"\n",(0,i.jsxs)(n.p,{children:["\u4ece\u78c1\u76d8\u7f13\u5b58\u52a0\u8f7d\u56fe\u7247\u65e0\u76f8\u5173\u65e5\u5fd7\u6253\u5370\uff0c\u6b64\u65f6\u52a0\u8f7d\u7684\u662f\u524d\u9762\u7f13\u5b58\u7684\u53d8\u6362\u540e\u7684\u56fe\u7247\u3002\u67e5\u627e ",(0,i.jsx)(n.a,{href:"https://github.com/bumptech/glide/blob/v4.16.0/library/src/main/java/com/bumptech/glide/load/Transformation.java#L65",children:(0,i.jsx)(n.code,{children:"Transformation#transform"})})," \u7684\u8c03\u7528\uff0c\u53ef\u4ee5\u5728 ",(0,i.jsx)(n.a,{href:"https://github.com/bumptech/glide/blob/v4.16.0/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java#L571",children:(0,i.jsx)(n.code,{children:"DecodeJob#onResourceDecoded"})})," \u627e\u5230\u7b54\u6848\uff1a"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="com.bumptech.glide.load.engine.DecodeJob"',children:'@Synthetic\n@NonNull\n<Z> Resource<Z> onResourceDecoded(DataSource dataSource, @NonNull Resource<Z> decoded) {\n    @SuppressWarnings("unchecked")\n    Class<Z> resourceSubClass = (Class<Z>) decoded.get().getClass();\n    Transformation<Z> appliedTransformation = null;\n    Resource<Z> transformed = decoded;\n    // highlight-start\n    if (dataSource != DataSource.RESOURCE_DISK_CACHE) {\n        appliedTransformation = decodeHelper.getTransformation(resourceSubClass);\n        transformed = appliedTransformation.transform(glideContext, decoded, width, height);\n    }\n    // highlight-end\n    // TODO: Make this the responsibility of the Transformation.\n    if (!decoded.equals(transformed)) {\n        decoded.recycle();\n    }\n\n    final EncodeStrategy encodeStrategy;\n    final ResourceEncoder<Z> encoder;\n    if (decodeHelper.isResourceEncoderAvailable(transformed)) {\n        encoder = decodeHelper.getResultEncoder(transformed);\n        encodeStrategy = encoder.getEncodeStrategy(options);\n    } else {\n        encoder = null;\n        encodeStrategy = EncodeStrategy.NONE;\n    }\n\n    Resource<Z> result = transformed;\n    boolean isFromAlternateCacheKey = !decodeHelper.isSourceKey(currentSourceKey);\n    if (diskCacheStrategy.isResourceCacheable(\n        isFromAlternateCacheKey, dataSource, encodeStrategy)) {\n        if (encoder == null) {\n            throw new Registry.NoResultEncoderAvailableException(transformed.get().getClass());\n        }\n        final Key key;\n        switch (encodeStrategy) {\n            case SOURCE:\n                key = new DataCacheKey(currentSourceKey, signature);\n                break;\n            // highlight-start\n            case TRANSFORMED:\n                key =\n                    new ResourceCacheKey(\n                        decodeHelper.getArrayPool(),\n                        currentSourceKey,\n                        signature,\n                        width,\n                        height,\n                        appliedTransformation,\n                        resourceSubClass,\n                        options);\n                break;\n            // highlight-end\n            default:\n                throw new IllegalArgumentException("Unknown strategy: " + encodeStrategy);\n        }\n\n        LockedResource<Z> lockedResult = LockedResource.obtain(transformed);\n        deferredEncodeManager.init(key, encoder, lockedResult);\n        result = lockedResult;\n    }\n    return result;\n}\n'})}),"\n",(0,i.jsx)(n.mermaid,{value:'---\ntitle: \u4ece\u78c1\u76d8\u7f13\u5b58\u52a0\u8f7d\u56fe\u7247\n---\nflowchart LR\n    cache["\u78c1\u76d8\u7f13\u5b58 1080x180"] -- \u89e3\u7801 --\x3e decoded["\u4f4d\u56fe 14400x2400"]'}),"\n",(0,i.jsx)(n.p,{children:"\u89e3\u7801\u8fc7\u7a0b\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f"}),"\n",(0,i.jsxs)(n.p,{children:["\u67e5\u627e ",(0,i.jsx)(n.a,{href:"https://github.com/bumptech/glide/blob/v4.16.0/library/src/main/java/com/bumptech/glide/load/engine/DecodeJob.java#L571",children:(0,i.jsx)(n.code,{children:"DecodeJob#onResourceDecoded"})})," \u7684\u8c03\u7528\uff0c\u4e0d\u96be\u627e\u5230\u89e3\u7801\u7684\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://github.com/bumptech/glide/blob/v4.16.0/library/src/main/java/com/bumptech/glide/load/ResourceDecoder.java#L62",children:(0,i.jsx)(n.code,{children:"ResourceDecoder#decode"})}),"\uff1a"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="com.bumptech.glide.load.engine.DecodePath"',children:'public Resource<Transcode> decode(\n    DataRewinder<DataType> rewinder,\n    int width,\n    int height,\n    @NonNull Options options,\n    DecodePath.DecodeCallback<ResourceType> callback)\n    throws GlideException {\n    // highlight-next-line\n    Resource<ResourceType> decoded = decodeResource(rewinder, width, height, options);\n    Resource<ResourceType> transformed = callback.onResourceDecoded(decoded);\n    return transcoder.transcode(transformed, options);\n}\n\n@NonNull\nprivate Resource<ResourceType> decodeResource(\n    DataRewinder<DataType> rewinder, int width, int height, @NonNull Options options)\n    throws GlideException {\n    List<Throwable> exceptions = Preconditions.checkNotNull(listPool.acquire());\n    try {\n        // highlight-next-line\n        return decodeResourceWithList(rewinder, width, height, options, exceptions);\n    } finally {\n        listPool.release(exceptions);\n    }\n}\n\n@NonNull\nprivate Resource<ResourceType> decodeResourceWithList(\n    DataRewinder<DataType> rewinder,\n    int width,\n    int height,\n    @NonNull Options options,\n    List<Throwable> exceptions)\n    throws GlideException {\n    Resource<ResourceType> result = null;\n    //noinspection ForLoopReplaceableByForEach to improve perf\n    for (int i = 0, size = decoders.size(); i < size; i++) {\n        ResourceDecoder<DataType, ResourceType> decoder = decoders.get(i);\n        try {\n            DataType data = rewinder.rewindAndGet();\n            if (decoder.handles(data, options)) {\n                data = rewinder.rewindAndGet();\n                // highlight-next-line\n                result = decoder.decode(data, width, height, options);\n            }\n            // Some decoders throw unexpectedly. If they do, we shouldn\'t fail the entire load path, but\n            // instead log and continue. See #2406 for an example.\n        } catch (IOException | RuntimeException | OutOfMemoryError e) {\n            if (Log.isLoggable(TAG, Log.VERBOSE)) {\n                Log.v(TAG, "Failed to decode data for " + decoder, e);\n            }\n            exceptions.add(e);\n        }\n\n        if (result != null) {\n            break;\n        }\n    }\n\n    if (result == null) {\n        throw new GlideException(failureMessage, new ArrayList<>(exceptions));\n    }\n    return result;\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\u901a\u8fc7\u65ad\u70b9\u8c03\u8bd5\uff0c\u53ef\u4ee5\u77e5\u9053\u4ece\u539f\u59cb\u8d44\u6e90\u52a0\u8f7d\u56fe\u7247\u8c03\u7528 ",(0,i.jsx)(n.a,{href:"https://github.com/bumptech/glide/blob/v4.16.0/library/src/main/java/com/bumptech/glide/load/resource/bitmap/StreamBitmapDecoder.java#L34",children:(0,i.jsx)(n.code,{children:"StreamBitmapDecoder#decode"})})," \u89e3\u7801\uff0c\u4ece\u78c1\u76d8\u7f13\u5b58\u52a0\u8f7d\u56fe\u7247\u8c03\u7528 ",(0,i.jsx)(n.a,{href:"https://github.com/bumptech/glide/blob/v4.16.0/library/src/main/java/com/bumptech/glide/load/resource/bitmap/ByteBufferBitmapDecoder.java#L25",children:(0,i.jsx)(n.code,{children:"ByteBufferBitmapDecoder#decode"})})," \u89e3\u7801\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="com.bumptech.glide.load.resource.bitmap.StreamBitmapDecoder"',children:"@Override\npublic Resource<Bitmap> decode(\n    @NonNull InputStream source, int width, int height, @NonNull Options options)\n    throws IOException {\n\n    // Use to fix the mark limit to avoid allocating buffers that fit entire images.\n    final RecyclableBufferedInputStream bufferedStream;\n    final boolean ownsBufferedStream;\n    if (source instanceof RecyclableBufferedInputStream) {\n        bufferedStream = (RecyclableBufferedInputStream) source;\n        ownsBufferedStream = false;\n    } else {\n        bufferedStream = new RecyclableBufferedInputStream(source, byteArrayPool);\n        ownsBufferedStream = true;\n    }\n\n    // Use to retrieve exceptions thrown while reading.\n    // TODO(#126): when the framework no longer returns partially decoded Bitmaps or provides a\n    // way to determine if a Bitmap is partially decoded, consider removing.\n    ExceptionPassthroughInputStream exceptionStream =\n        ExceptionPassthroughInputStream.obtain(bufferedStream);\n\n    // Use to read data.\n    // Ensures that we can always reset after reading an image header so that we can still\n    // attempt to decode the full image even when the header decode fails and/or overflows our read\n    // buffer. See #283.\n    MarkEnforcingInputStream invalidatingStream = new MarkEnforcingInputStream(exceptionStream);\n    StreamBitmapDecoder.UntrustedCallbacks callbacks = new StreamBitmapDecoder.UntrustedCallbacks(bufferedStream, exceptionStream);\n    try {\n        // highlight-next-line\n        return downsampler.decode(invalidatingStream, width, height, options, callbacks);\n    } finally {\n        exceptionStream.release();\n        if (ownsBufferedStream) {\n            bufferedStream.release();\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="com.bumptech.glide.load.resource.bitmap.ByteBufferBitmapDecoder"',children:"@Override\npublic Resource<Bitmap> decode(\n    @NonNull ByteBuffer source, int width, int height, @NonNull Options options)\n    throws IOException {\n    // highlight-next-line\n    return downsampler.decode(source, width, height, options);\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\u4e0d\u8bba\u54ea\u4e2a\u89e3\u7801\u65b9\u6cd5\uff0c\u6700\u7ec8\u90fd\u8c03\u7528\u4e86 ",(0,i.jsx)(n.a,{href:"https://github.com/bumptech/glide/blob/v4.16.0/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java#L303",children:(0,i.jsx)(n.code,{children:"Downsampler#decodeFromWrappedStreams"})}),"\uff0c\u4e0e\u5c3a\u5bf8\u76f8\u5173\u7684\u8ba1\u7b97\u901a\u8fc7 ",(0,i.jsx)(n.a,{href:"https://github.com/bumptech/glide/blob/v4.16.0/library/src/main/java/com/bumptech/glide/load/resource/bitmap/Downsampler.java#L459",children:(0,i.jsx)(n.code,{children:"Downsampler#calculateScaling"})})," \u5b8c\u6210\uff1a"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="com.bumptech.glide.load.resource.bitmap.Downsampler"',children:'private static void calculateScaling(\n    ImageHeaderParser.ImageType imageType,\n    ImageReader imageReader,\n    Downsampler.DecodeCallbacks decodeCallbacks,\n    BitmapPool bitmapPool,\n    DownsampleStrategy downsampleStrategy,\n    int degreesToRotate,\n    int sourceWidth,\n    int sourceHeight,\n    int targetWidth,\n    int targetHeight,\n    BitmapFactory.Options options)\n    throws IOException {\n    // We can\'t downsample source content if we can\'t determine its dimensions.\n    if (sourceWidth <= 0 || sourceHeight <= 0) {\n        if (Log.isLoggable(TAG, Log.DEBUG)) {\n            Log.d(\n                TAG,\n                "Unable to determine dimensions for: "\n                    + imageType\n                    + " with target ["\n                    + targetWidth\n                    + "x"\n                    + targetHeight\n                    + "]");\n        }\n        return;\n    }\n\n    int orientedSourceWidth = sourceWidth;\n    int orientedSourceHeight = sourceHeight;\n    // If we\'re rotating the image +-90 degrees, we need to downsample accordingly so the image\n    // width is decreased to near our target\'s height and the image height is decreased to near\n    // our target width.\n    //noinspection SuspiciousNameCombination\n    if (isRotationRequired(degreesToRotate)) {\n        orientedSourceWidth = sourceHeight;\n        orientedSourceHeight = sourceWidth;\n    }\n\n    final float exactScaleFactor =\n        downsampleStrategy.getScaleFactor(\n            orientedSourceWidth, orientedSourceHeight, targetWidth, targetHeight);\n\n    if (exactScaleFactor <= 0f) {\n        throw new IllegalArgumentException(\n            "Cannot scale with factor: "\n                + exactScaleFactor\n                + " from: "\n                + downsampleStrategy\n                + ", source: ["\n                + sourceWidth\n                + "x"\n                + sourceHeight\n                + "]"\n                + ", target: ["\n                + targetWidth\n                + "x"\n                + targetHeight\n                + "]");\n    }\n\n    DownsampleStrategy.SampleSizeRounding rounding =\n        downsampleStrategy.getSampleSizeRounding(\n            orientedSourceWidth, orientedSourceHeight, targetWidth, targetHeight);\n    if (rounding == null) {\n        throw new IllegalArgumentException("Cannot round with null rounding");\n    }\n\n    int outWidth = round(exactScaleFactor * orientedSourceWidth);\n    int outHeight = round(exactScaleFactor * orientedSourceHeight);\n\n    int widthScaleFactor = orientedSourceWidth / outWidth;\n    int heightScaleFactor = orientedSourceHeight / outHeight;\n\n    // TODO: This isn\'t really right for both CenterOutside and CenterInside. Consider allowing\n    // DownsampleStrategy to pick, or trying to do something more sophisticated like picking the\n    // scale factor that leads to an exact match.\n    int scaleFactor =\n        rounding == DownsampleStrategy.SampleSizeRounding.MEMORY\n            ? Math.max(widthScaleFactor, heightScaleFactor)\n            : Math.min(widthScaleFactor, heightScaleFactor);\n\n    int powerOfTwoSampleSize;\n    // BitmapFactory does not support downsampling wbmp files on platforms <= M. See b/27305903.\n    if (Build.VERSION.SDK_INT <= 23\n        && NO_DOWNSAMPLE_PRE_N_MIME_TYPES.contains(options.outMimeType)) {\n        powerOfTwoSampleSize = 1;\n    } else {\n        powerOfTwoSampleSize = Math.max(1, Integer.highestOneBit(scaleFactor));\n        if (rounding == DownsampleStrategy.SampleSizeRounding.MEMORY\n            && powerOfTwoSampleSize < (1.f / exactScaleFactor)) {\n            powerOfTwoSampleSize = powerOfTwoSampleSize << 1;\n        }\n    }\n\n    // Here we mimic framework logic for determining how inSampleSize division is rounded on various\n    // versions of Android. The logic here has been tested on emulators for Android versions 15-26.\n    // PNG - Always uses floor\n    // JPEG - Always uses ceiling\n    // Webp - Prior to N, always uses floor. At and after N, always uses round.\n    options.inSampleSize = powerOfTwoSampleSize;\n    int powerOfTwoWidth;\n    int powerOfTwoHeight;\n    if (imageType == ImageHeaderParser.ImageType.JPEG) {\n        // libjpegturbo can downsample up to a sample size of 8. libjpegturbo uses ceiling to round.\n        // After libjpegturbo\'s native rounding, skia does a secondary scale using floor\n        // (integer division). Here we replicate that logic.\n        int nativeScaling = Math.min(powerOfTwoSampleSize, 8);\n        powerOfTwoWidth = (int) Math.ceil(orientedSourceWidth / (float) nativeScaling);\n        powerOfTwoHeight = (int) Math.ceil(orientedSourceHeight / (float) nativeScaling);\n        int secondaryScaling = powerOfTwoSampleSize / 8;\n        if (secondaryScaling > 0) {\n            powerOfTwoWidth = powerOfTwoWidth / secondaryScaling;\n            powerOfTwoHeight = powerOfTwoHeight / secondaryScaling;\n        }\n    } else if (imageType == ImageHeaderParser.ImageType.PNG || imageType == ImageHeaderParser.ImageType.PNG_A) {\n        powerOfTwoWidth = (int) Math.floor(orientedSourceWidth / (float) powerOfTwoSampleSize);\n        powerOfTwoHeight = (int) Math.floor(orientedSourceHeight / (float) powerOfTwoSampleSize);\n    } else if (imageType.isWebp()) {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n            powerOfTwoWidth = Math.round(orientedSourceWidth / (float) powerOfTwoSampleSize);\n            powerOfTwoHeight = Math.round(orientedSourceHeight / (float) powerOfTwoSampleSize);\n        } else {\n            powerOfTwoWidth = (int) Math.floor(orientedSourceWidth / (float) powerOfTwoSampleSize);\n            powerOfTwoHeight = (int) Math.floor(orientedSourceHeight / (float) powerOfTwoSampleSize);\n        }\n    } else if (orientedSourceWidth % powerOfTwoSampleSize != 0\n        || orientedSourceHeight % powerOfTwoSampleSize != 0) {\n        // If we\'re not confident the image is in one of our types, fall back to checking the\n        // dimensions again. inJustDecodeBounds decodes do obey inSampleSize.\n        int[] dimensions = getDimensions(imageReader, options, decodeCallbacks, bitmapPool);\n        // Power of two downsampling in BitmapFactory uses a variety of random factors to determine\n        // rounding that we can\'t reliably replicate for all image formats. Use ceiling here to make\n        // sure that we at least provide a Bitmap that\'s large enough to fit the content we\'re going\n        // to load.\n        powerOfTwoWidth = dimensions[0];\n        powerOfTwoHeight = dimensions[1];\n    } else {\n        powerOfTwoWidth = orientedSourceWidth / powerOfTwoSampleSize;\n        powerOfTwoHeight = orientedSourceHeight / powerOfTwoSampleSize;\n    }\n\n    // highlight-start\n    double adjustedScaleFactor =\n        downsampleStrategy.getScaleFactor(\n            powerOfTwoWidth, powerOfTwoHeight, targetWidth, targetHeight);\n\n    // Density scaling is only supported if inBitmap is null prior to KitKat. Avoid setting\n    // densities here so we calculate the final Bitmap size correctly.\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {\n        options.inTargetDensity = adjustTargetDensityForError(adjustedScaleFactor);\n        options.inDensity = getDensityMultiplier(adjustedScaleFactor);\n    }\n    if (isScaling(options)) {\n        options.inScaled = true;\n    } else {\n        options.inDensity = options.inTargetDensity = 0;\n    }\n    // highlight-end\n\n    if (Log.isLoggable(TAG, Log.VERBOSE)) {\n        Log.v(\n            TAG,\n            "Calculate scaling"\n                + ", source: ["\n                + sourceWidth\n                + "x"\n                + sourceHeight\n                + "]"\n                + ", degreesToRotate: "\n                + degreesToRotate\n                + ", target: ["\n                + targetWidth\n                + "x"\n                + targetHeight\n                + "]"\n                + ", power of two scaled: ["\n                + powerOfTwoWidth\n                + "x"\n                + powerOfTwoHeight\n                + "]"\n                + ", exact scale factor: "\n                + exactScaleFactor\n                + ", power of 2 sample size: "\n                + powerOfTwoSampleSize\n                + ", adjusted scale factor: "\n                + adjustedScaleFactor\n                + ", target density: "\n                + options.inTargetDensity\n                + ", density: "\n                + options.inDensity);\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["\u8c03\u6574 ",(0,i.jsx)(n.code,{children:"Downsampler"})," \u65e5\u5fd7\u7ea7\u522b\uff1a"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-shell",children:"adb shell setprop log.tag.Downsampler VERBOSE\n"})}),"\n",(0,i.jsx)(n.p,{children:"\u4ece\u539f\u59cb\u8d44\u6e90\u52a0\u8f7d\u56fe\u7247\u65e5\u5fd7\u6253\u5370\u5982\u4e0b\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-log",children:"Downsampler: Calculate scaling, source: [6000x1000], degreesToRotate: 0, target: [1080x2400], power of two scaled: [6000x1000], exact scale factor: 2.4, power of 2 sample size: 1, adjusted scale factor: 2.4000000953674316, target density: 2147483646, density: 894784817\nDownsampler: Calculated target [14400x2400] for source [6000x1000], sampleSize: 1, targetDensity: 2147483646, density: 894784817, density multiplier: 2.4\n"})}),"\n",(0,i.jsx)(n.p,{children:"\u4ece\u78c1\u76d8\u7f13\u5b58\u52a0\u8f7d\u56fe\u7247\u65e5\u5fd7\u6253\u5370\u5982\u4e0b\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-log",children:"Downsampler: Calculate scaling, source: [1080x180], degreesToRotate: 0, target: [1080x2400], power of two scaled: [1080x180], exact scale factor: 13.333333, power of 2 sample size: 1, adjusted scale factor: 13.333333015441895, target density: 2147483642, density: 161061277\nDownsampler: Calculated target [14400x2400] for source [1080x180], sampleSize: 1, targetDensity: 2147483642, density: 161061277, density multiplier: 13.333333\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\u95ee\u9898\u5173\u952e\u70b9\u627e\u5230\u4e86\uff0c",(0,i.jsx)(n.a,{href:"https://github.com/bumptech/glide/blob/v4.16.0/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategy.java#L122",children:(0,i.jsx)(n.code,{children:"DownsampleStrategy#getScaleFactor"})})," \u6839\u636e\u6e90\u5927\u5c0f\u548c\u76ee\u6807\u5927\u5c0f\u8ba1\u7b97\u51fa\u7f29\u653e\u6bd4\u4f8b\uff0c\u4e0d\u540c\u7684\u4e0b\u91c7\u6837\u7b56\u7565\u6709\u4e0d\u540c\u7684\u8ba1\u7b97\u89c4\u5219\uff0c\u8ba1\u7b97\u51fa\u7684\u7f29\u653e\u6bd4\u4f8b\u51b3\u5b9a\u4e86\u6700\u7ec8\u76ee\u6807\u5927\u5c0f\u3002\u901a\u8fc7\u65ad\u70b9\u8c03\u8bd5\uff0c\u53ef\u4ee5\u770b\u5230\u4f7f\u7528\u7684\u4e0b\u91c7\u6837\u7b56\u7565\u90fd\u662f ",(0,i.jsx)(n.a,{href:"https://github.com/bumptech/glide/blob/v4.16.0/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategy.java#L81",children:(0,i.jsx)(n.code,{children:"DownsampleStrategy#CENTER_OUTSIDE"})}),"\uff0c\u9ed8\u8ba4\u4e0b\u91c7\u6837\u7b56\u7565 ",(0,i.jsx)(n.a,{href:"https://github.com/bumptech/glide/blob/v4.16.0/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategy.java#L87",children:(0,i.jsx)(n.code,{children:"DownsampleStrategy#DEFAULT"})})," \u4e5f\u662f\u8be5\u7b56\u7565\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="com.bumptech.glide.load.resource.bitmap.DownsampleStrategy"',children:"/**\n * Scales, maintaining the original aspect ratio, so that one of the image's dimensions is exactly\n * equal to the requested size and the other dimension is greater than or equal to the requested\n * size.\n *\n * <p>This method will upscale if the requested width and height are greater than the source width\n * and height. To avoid upscaling, use {@link #AT_LEAST}, {@link #AT_MOST}, or {@link\n * #CENTER_INSIDE}.\n *\n * <p>On pre-KitKat devices, {@link Downsampler} treats this as equivalent to {@link #AT_LEAST}\n * because only power of two downsampling can be used.\n */\npublic static final DownsampleStrategy CENTER_OUTSIDE = new DownsampleStrategy.CenterOutside();\n\n/** Default strategy, currently {@link #CENTER_OUTSIDE}. */\npublic static final DownsampleStrategy DEFAULT = CENTER_OUTSIDE;\n\nprivate static class CenterOutside extends DownsampleStrategy {\n\n    @Synthetic\n    CenterOutside() {}\n\n    @Override\n    public float getScaleFactor(\n        int sourceWidth, int sourceHeight, int requestedWidth, int requestedHeight) {\n        // highlight-start\n        float widthPercentage = requestedWidth / (float) sourceWidth;\n        float heightPercentage = requestedHeight / (float) sourceHeight;\n        return Math.max(widthPercentage, heightPercentage);\n        // highlight-end\n    }\n\n    @Override\n    public SampleSizeRounding getSampleSizeRounding(\n        int sourceWidth, int sourceHeight, int requestedWidth, int requestedHeight) {\n        return SampleSizeRounding.QUALITY;\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/bumptech/glide/blob/v4.16.0/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategy.java#L81",children:(0,i.jsx)(n.code,{children:"DownsampleStrategy#CENTER_OUTSIDE"})})," \u4e0b\u91c7\u6837\u7b56\u7565\u5b9a\u4e49\u4e3a\u4fdd\u6301\u539f\u59cb\u7eb5\u6a2a\u6bd4\u7f29\u653e\uff0c\u4f7f\u5f97\u56fe\u50cf\u7684\u4e00\u4e2a\u5c3a\u5bf8\uff08\u5bbd\u5ea6\u6216\u9ad8\u5ea6\uff09\u7b49\u4e8e\u8bf7\u6c42\u7684\u76f8\u5e94\u5c3a\u5bf8\uff0c\u53e6\u4e00\u4e2a\u5c3a\u5bf8\u5927\u4e8e\u6216\u7b49\u4e8e\u8bf7\u6c42\u7684\u76f8\u5e94\u5c3a\u5bf8\u3002\u6839\u636e\u5b9a\u4e49\uff0c\u7f29\u653e\u6bd4\u4f8b\u8ba1\u7b97\u89c4\u5219\u4e3a ",(0,i.jsx)(n.code,{children:"max(requestedWidth/sourceWidth, requestedHeight/sourceHeight)"}),"\u3002"]}),"\n",(0,i.jsx)(n.p,{children:"\u5230\u8fd9\u91cc\uff0c\u95ee\u9898\u5df2\u7ecf\u5206\u6790\u6e05\u695a\u4e86\u3002"}),"\n",(0,i.jsx)(n.h2,{id:"\u95ee\u9898\u89e3\u51b3",children:"\u95ee\u9898\u89e3\u51b3"}),"\n",(0,i.jsxs)(n.p,{children:["\u4f7f\u7528\u5408\u9002\u7684\u4e0b\u91c7\u6837\u7b56\u7565 ",(0,i.jsx)(n.a,{href:"https://github.com/bumptech/glide/blob/v4.16.0/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategy.java#L64",children:(0,i.jsx)(n.code,{children:"DownsampleStrategy#FIT_CENTER"})}),"\uff1a"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="com.bumptech.glide.load.resource.bitmap.DownsampleStrategy"',children:"/**\n * Scales, maintaining the original aspect ratio, so that one of the image's dimensions is exactly\n * equal to the requested size and the other dimension is less than or equal to the requested\n * size.\n *\n * <p>This method will upscale if the requested width and height are greater than the source width\n * and height. To avoid upscaling, use {@link #AT_LEAST}, {@link #AT_MOST} or {@link\n * #CENTER_INSIDE}.\n *\n * <p>On pre-KitKat devices, {@code FIT_CENTER} will downsample by a power of two only so that one\n * of the image's dimensions is greater than or equal to the requested size. No guarantees are\n * made about the second dimensions. This is <em>NOT</em> the same as {@link #AT_LEAST} because\n * only one dimension, not both, are greater than or equal to the requested dimensions, the other\n * may be smaller.\n */\npublic static final DownsampleStrategy FIT_CENTER = new DownsampleStrategy.FitCenter();\n\n@Synthetic\nstatic final boolean IS_BITMAP_FACTORY_SCALING_SUPPORTED =\n    Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT;\n\nprivate static class FitCenter extends DownsampleStrategy {\n\n    @Synthetic\n    FitCenter() {}\n\n    @Override\n    public float getScaleFactor(\n        int sourceWidth, int sourceHeight, int requestedWidth, int requestedHeight) {\n        if (IS_BITMAP_FACTORY_SCALING_SUPPORTED) {\n            // highlight-start\n            float widthPercentage = requestedWidth / (float) sourceWidth;\n            float heightPercentage = requestedHeight / (float) sourceHeight;\n\n            return Math.min(widthPercentage, heightPercentage);\n            // highlight-end\n        } else {\n            // Similar to AT_LEAST, but only require one dimension or the other to be >= requested\n            // rather than both.\n            int maxIntegerFactor =\n                Math.max(sourceHeight / requestedHeight, sourceWidth / requestedWidth);\n            return maxIntegerFactor == 0 ? 1f : 1f / Integer.highestOneBit(maxIntegerFactor);\n        }\n    }\n\n    @Override\n    public SampleSizeRounding getSampleSizeRounding(\n        int sourceWidth, int sourceHeight, int requestedWidth, int requestedHeight) {\n        if (IS_BITMAP_FACTORY_SCALING_SUPPORTED) {\n            return SampleSizeRounding.QUALITY;\n        } else {\n            // TODO: This doesn't seem right, but otherwise we can skip a sample size because QUALITY\n            // prefers the smaller of the width and height scale factor. MEMORY is a hack that\n            // lets us prefer the larger of the two.\n            return SampleSizeRounding.MEMORY;\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"Glide.with(imageView)\n    .asBitmap()\n    .load(R.drawable.image)\n    // highlight-next-line\n    .downsample(DownsampleStrategy.FIT_CENTER)\n    .transform(new FitCenter())\n    .into(imageView);\n"})}),"\n",(0,i.jsx)(n.p,{children:"\u56fe\u7247\u6b63\u5e38\u52a0\u8f7d\uff0c\u52a0\u8f7d\u7684\u4f4d\u56fe\u5927\u5c0f\u4e5f\u4e0e\u9884\u671f\u5927\u5c0f\u4e00\u81f4\u3002"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"\u4ece\u539f\u59cb\u8d44\u6e90\u52a0\u8f7d\u56fe\u7247\u65e5\u5fd7\u6253\u5370\u5982\u4e0b\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-log",children:"Downsampler: Calculate scaling, source: [6000x1000], degreesToRotate: 0, target: [1080x2400], power of two scaled: [1500x250], exact scale factor: 0.18, power of 2 sample size: 4, adjusted scale factor: 0.7200000286102295, target density: 1113255703, density: 1546188287\nDownsampler: Calculated target [1080x180] for source [6000x1000], sampleSize: 4, targetDensity: 1113255703, density: 1546188287, density multiplier: 0.7200001\n"})}),"\n",(0,i.jsx)(n.p,{children:"\u4ece\u78c1\u76d8\u7f13\u5b58\u52a0\u8f7d\u56fe\u7247\u65e5\u5fd7\u6253\u5370\u5982\u4e0b\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-log",children:"Downsampler: Calculate scaling, source: [1080x180], degreesToRotate: 0, target: [1080x2400], power of two scaled: [1080x180], exact scale factor: 1.0, power of 2 sample size: 1, adjusted scale factor: 1.0, target density: 0, density: 0\nDownsampler: Calculated target [1080x180] for source [1080x180], sampleSize: 1, targetDensity: 0, density: 0, density multiplier: 1.0\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\u8c03\u7528 ",(0,i.jsx)(n.a,{href:"https://github.com/bumptech/glide/blob/v4.16.0/library/src/main/java/com/bumptech/glide/request/BaseRequestOptions.java#L767",children:(0,i.jsx)(n.code,{children:"BaseRequestOptions#fitCenter"})})," \u53ef\u4ee5\u540c\u65f6\u8bbe\u7f6e\u4e0b\u91c7\u6837\u7b56\u7565 ",(0,i.jsx)(n.a,{href:"https://github.com/bumptech/glide/blob/v4.16.0/library/src/main/java/com/bumptech/glide/load/resource/bitmap/DownsampleStrategy.java#L64",children:(0,i.jsx)(n.code,{children:"DownsampleStrategy#FIT_CENTER"})})," \u548c\u53d8\u6362 ",(0,i.jsx)(n.a,{href:"https://github.com/bumptech/glide/blob/v4.16.0/library/src/main/java/com/bumptech/glide/load/resource/bitmap/FitCenter.java",children:(0,i.jsx)(n.code,{children:"FitCenter"})}),"\uff1a"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="com.bumptech.glide.request.BaseRequestOptions"',children:"/**\n * Applies {@link FitCenter} and to all default types, {@link DownsampleStrategy#FIT_CENTER} to\n * image types, and throws an exception if asked to transform an unknown type.\n *\n * <p>This will override previous calls to {@link #dontTransform()} and previous calls to {@link\n * #downsample(DownsampleStrategy)}.\n *\n * @see #transform(Class, Transformation)\n * @see #optionalFitCenter()\n */\n@NonNull\n@CheckResult\npublic T fitCenter() {\n    // highlight-next-line\n    return scaleOnlyTransform(DownsampleStrategy.FIT_CENTER, new FitCenter());\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"Glide.with(imageView)\n    .asBitmap()\n    .load(R.drawable.image)\n    // highlight-next-line\n    .fitCenter()\n    .into(imageView);\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"ImageView"})," \u8bbe\u7f6e\u4e86 ",(0,i.jsx)(n.code,{children:"ScaleType"})," \u7684\u60c5\u51b5\u4e0b\uff0c\u4e0d\u8bbe\u7f6e\u4e0b\u91c7\u6837\u7b56\u7565\u548c\u53d8\u6362\u4e5f\u662f\u53ef\u4ee5\u7684\u3002"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",metastring:'title="com.bumptech.glide.RequestBuilder"',children:"/**\n * Sets the {@link ImageView} the resource will be loaded into, cancels any existing loads into\n * the view, and frees any resources Glide may have previously loaded into the view so they may be\n * reused.\n *\n * @see RequestManager#clear(Target)\n * @param view The view to cancel previous loads for and load the new resource into.\n * @return The {@link com.bumptech.glide.request.target.Target} used to wrap the given {@link\n *     ImageView}.\n */\n@NonNull\npublic ViewTarget<ImageView, TranscodeType> into(@NonNull ImageView view) {\n    Util.assertMainThread();\n    Preconditions.checkNotNull(view);\n\n    // highlight-start\n    BaseRequestOptions<?> requestOptions = this;\n    if (!requestOptions.isTransformationSet()\n        && requestOptions.isTransformationAllowed()\n        && view.getScaleType() != null) {\n        // Clone in this method so that if we use this RequestBuilder to load into a View and then\n        // into a different target, we don't retain the transformation applied based on the previous\n        // View's scale type.\n        switch (view.getScaleType()) {\n            case CENTER_CROP:\n                requestOptions = requestOptions.clone().optionalCenterCrop();\n                break;\n            case CENTER_INSIDE:\n                requestOptions = requestOptions.clone().optionalCenterInside();\n                break;\n            case FIT_CENTER:\n            case FIT_START:\n            case FIT_END:\n                requestOptions = requestOptions.clone().optionalFitCenter();\n                break;\n            case FIT_XY:\n                requestOptions = requestOptions.clone().optionalCenterInside();\n                break;\n            case CENTER:\n            case MATRIX:\n            default:\n                // Do nothing.\n        }\n    }\n    // highlight-end\n\n    return into(\n        glideContext.buildImageViewTarget(view, transcodeClass),\n        /* targetListener= */ null,\n        requestOptions,\n        Executors.mainThreadExecutor());\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"Glide.with(imageView)\n    .asBitmap()\n    .load(R.drawable.image)\n    .into(imageView);\n"})}),"\n",(0,i.jsxs)(n.p,{children:["\u4f7f\u7528 ",(0,i.jsx)(n.a,{href:"https://github.com/bumptech/glide",children:"Glide"})," \u52a0\u8f7d\u56fe\u7247\u65f6\uff0c\u9700\u8981\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u8c03\u6574\u4e0b\u91c7\u6837\u7b56\u7565\uff0c\u5426\u5219\u53ef\u80fd\u4f1a\u51fa\u73b0\u52a0\u8f7d\u56fe\u7247\u5c3a\u5bf8\u5f02\u5e38\u7684\u95ee\u9898\uff0c\u5f71\u54cd\u52a0\u8f7d\u901f\u5ea6\u548c\u5185\u5b58\u5360\u7528\u3002"]}),"\n",(0,i.jsxs)(n.p,{children:["\u5982\u679c\u4e0d\u662f\u8fd9\u6b21\u52a0\u8f7d\u7684\u4f4d\u56fe\u8fc7\u5927\u5bfc\u81f4 ",(0,i.jsx)(n.code,{children:"ImageView"})," \u65e0\u6cd5\u7ed8\u5236\uff0c\u8fd9\u4e2a\u95ee\u9898\u53ef\u80fd\u4e00\u76f4\u65e0\u6cd5\u88ab\u53d1\u73b0\u3002"]}),"\n",(0,i.jsx)(n.p,{children:"\u662f\u4e0d\u662f\u53ef\u4ee5\u589e\u52a0\u4e00\u4e2a\u68c0\u6d4b\u4f4d\u56fe\u5c3a\u5bf8\u662f\u5426\u5f02\u5e38\u7684\u673a\u5236\u5462\uff1f"}),"\n",(0,i.jsx)(n.h2,{id:"\u53c2\u8003",children:"\u53c2\u8003"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/bumptech/glide",children:"Glide"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},3326:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/files/test-image-c9a8235df9af0737cbb47d3d00a2793a.png"}}]);